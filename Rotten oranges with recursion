class Solution:
    def __init__(self):
        self.fresh=0
        self.maxday=0
    def orangesRotting(self, grid):
        visited=[[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]
        print(visited)
        queue=[]
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 2:
                    visited[i][j]=1
                    queue.append([i,j,0])
                if grid[i][j]==1:
                    self.fresh+=1
        print(queue)
        print(self.fresh)
        def bfs():
            x,y,day=queue.pop(0)
            print(x,y,day,queue)
            if day>self.maxday:
                self.maxday=day
            for x1,y1 in [(x,y+1),(x,y-1),(x+1,y),(x-1,y)]:
                if ((x1>-1) and x1<len(grid)) and (y1>-1 and y1<len(grid[0])) and grid[x1][y1]==1 and visited[x1][y1]==0:
                    visited[x1][y1]=1
                    queue.append([x1,y1,day+1])
                    self.fresh-=1
            if queue:
                bfs()
            else:
                return
        if queue:
            bfs()
            if not self.fresh:
                return self.maxday
            else:
                return -1
        else:
            return 0

obj=Solution()
print(obj.orangesRotting([[2,1,1],[1,1,0],[0,1,1]]))